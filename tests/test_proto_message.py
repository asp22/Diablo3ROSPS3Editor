import pytest

import proto_parsers.proto_message as pm
import proto_parsers.buffer as buffer
from pathlib import Path

def test_simple_message_decode():
    data = b'\x08\xf0\x80\x0b\x10\x98\xcb\x0d\x18\xa2\xe8\x0d\x20\xd0\x96\xbf\x8a\x06\x28\xd8\xa6\xbf\x8a\x06\x30\xf3\xc8\xdc\xfb\x0d\x38\xe2\xae\xad\x87\x08\x40\x8e\xe8\x0a\x48\x01\x50\x00'
    assert len(data) == 44
    read, t = pm.decode(data)
    assert read == 44, f'read: {read}'
    assert t.count == 10

def test_parse_nested_message():        
    data = b'\x08\x6c\x12\x4e\x08\x6c\x12\x14\x08\x88\xd6\xcb\xe6\xfe\xa2\xa2\x9b\x60\x10\xa5\xc3\xcb\xbc\xb3\x8e\x85\xc0\x2d\x1a\x2c\x08\xf0\x80\x0b\x10\x98\xcb\x0d\x18\xa2\xe8\x0d\x20\xd0\x96\xbf\x8a\x06\x28\xd8\xa6\xbf\x8a\x06\x30\xf3\xc8\xdc\xfb\x0d\x38\xe2\xae\xad\x87\x08\x40\x8e\xe8\x0a\x48\x01\x50\x00\x20\x74\x38\x00\x30\x00\x6a\x00'
    assert len(data) == 82
    read, t = pm.decode(data)
    assert read == 82, f'read: {read}'
    assert t.count == 21
    #str(t)

def test_parse_nested_message():        
    data = b'\x08\x6c\x12\x4e\x08\x6c\x12\x14\x08\x88\xd6\xcb\xe6\xfe\xa2\xa2\x9b\x60\x10\xa5\xc3\xcb\xbc\xb3\x8e\x85\xc0\x2d\x1a\x2c\x08\xf0\x80\x0b\x10\x98\xcb\x0d\x18\xa2\xe8\x0d\x20\xd0\x96\xbf\x8a\x06\x28\xd8\xa6\xbf\x8a\x06\x30\xf3\xc8\xdc\xfb\x0d\x38\xe2\xae\xad\x87\x08\x40\x8e\xe8\x0a\x48\x01\x50\x00\x20\x74\x38\x00\x30\x00\x6a\x00'
    assert len(data) == 82
    read, t = pm.decode(data)
    assert read == 82, f'read: {read}'
    assert t.count == 2

def test_expand_buffers():        
    data = b'\x08\x6c\x12\x4e\x08\x6c\x12\x14\x08\x88\xd6\xcb\xe6\xfe\xa2\xa2\x9b\x60\x10\xa5\xc3\xcb\xbc\xb3\x8e\x85\xc0\x2d\x1a\x2c\x08\xf0\x80\x0b\x10\x98\xcb\x0d\x18\xa2\xe8\x0d\x20\xd0\x96\xbf\x8a\x06\x28\xd8\xa6\xbf\x8a\x06\x30\xf3\xc8\xdc\xfb\x0d\x38\xe2\xae\xad\x87\x08\x40\x8e\xe8\x0a\x48\x01\x50\x00\x20\x74\x38\x00\x30\x00\x6a\x00'
    read, t = pm.decode(data)
    pm.expand_buffer_to_message_recursive(t)
    assert t[1].count == 7
    assert t[1][1].count == 2
    assert t[1][2].count == 10

def test_expand_single_buffer():        
    data = b'\x08\x6c\x12\x4e\x08\x6c\x12\x14\x08\x88\xd6\xcb\xe6\xfe\xa2\xa2\x9b\x60\x10\xa5\xc3\xcb\xbc\xb3\x8e\x85\xc0\x2d\x1a\x2c\x08\xf0\x80\x0b\x10\x98\xcb\x0d\x18\xa2\xe8\x0d\x20\xd0\x96\xbf\x8a\x06\x28\xd8\xa6\xbf\x8a\x06\x30\xf3\xc8\xdc\xfb\x0d\x38\xe2\xae\xad\x87\x08\x40\x8e\xe8\x0a\x48\x01\x50\x00\x20\x74\x38\x00\x30\x00\x6a\x00'
    read, t = pm.decode(data)
    pm.expand_buffer(t[1])
    pm.expand_buffer(t[1][2])
    assert isinstance(t[1][1], buffer.Buffer)

def test_shrink_single_message():        
    data = b'\x08\x6c\x12\x4e\x08\x6c\x12\x14\x08\x88\xd6\xcb\xe6\xfe\xa2\xa2\x9b\x60\x10\xa5\xc3\xcb\xbc\xb3\x8e\x85\xc0\x2d\x1a\x2c\x08\xf0\x80\x0b\x10\x98\xcb\x0d\x18\xa2\xe8\x0d\x20\xd0\x96\xbf\x8a\x06\x28\xd8\xa6\xbf\x8a\x06\x30\xf3\xc8\xdc\xfb\x0d\x38\xe2\xae\xad\x87\x08\x40\x8e\xe8\x0a\x48\x01\x50\x00\x20\x74\x38\x00\x30\x00\x6a\x00'
    read, t = pm.decode(data)
    pm.expand_buffer(t[1])
    pm.expand_buffer(t[1][2])
    assert isinstance(t[1][2], pm.Message)
    pm.shrink_message(t[1][2])
    assert isinstance(t[1][2], buffer.Buffer)

def test_squash_buffers():        
    data = b'\x08\x6c\x12\x4e\x08\x6c\x12\x14\x08\x88\xd6\xcb\xe6\xfe\xa2\xa2\x9b\x60\x10\xa5\xc3\xcb\xbc\xb3\x8e\x85\xc0\x2d\x1a\x2c\x08\xf0\x80\x0b\x10\x98\xcb\x0d\x18\xa2\xe8\x0d\x20\xd0\x96\xbf\x8a\x06\x28\xd8\xa6\xbf\x8a\x06\x30\xf3\xc8\xdc\xfb\x0d\x38\xe2\xae\xad\x87\x08\x40\x8e\xe8\x0a\x48\x01\x50\x00\x20\x74\x38\x00\x30\x00\x6a\x00'
    read, t = pm.decode(data)
    pm.expand_buffer_to_message_recursive(t)
    pm.shrink_message_to_buffer_recursive(t[1])
    assert t[1].count == 7
    assert t[1][1].size == 20
    assert t[1][2].size == 44

def test_decode_account():
    path = Path(__file__).parent/ "data/proto_message/ACCOUNT.DECRYPT"
    assert path.exists()
    with open(path, 'rb') as f:
        data = f.read()

    read, t = pm.decode(data)
    assert read == len(data)
    pm.expand_buffer_to_message_recursive(t)
    encoded = t.encode()
    assert data == encoded
